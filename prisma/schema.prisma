// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  REQUIRES_PAYMENT
  PAID
  FAILED
  REFUNDED
}

enum ChatStatus {
  OPEN
  ACCEPTED
  REJECTED
  CLOSED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String  @unique
  password      String
  name          String?
  role          Role    @default(BUYER)
  emailVerified Boolean @default(false)
  isSuspended   Boolean @default(false)

  stripeAccountId     String?
  orders              Order[]
  cart                Cart?
  otps                OTP[]
  Message             Message[]
  products            Product[]      @relation("SellerProducts")
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")

  @@map("user")
}

enum OtpType {
  REGISTRATION
  PASSWORD_RESET
}

model OTP {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime

  code String
  type OtpType @default(REGISTRATION)

  userEmail String
  user      User   @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
  @@index([code])
  @@map("otp")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([name])
  @@map("category")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String
  seller   User   @relation("SellerProducts", fields: [sellerId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  name   String
  price  Float
  color  String
  active Boolean @default(true)
  status ProductStatus @default(DRAFT)

  orderItems   OrderItem[]
  cartItems    CartItem[]
  conversation Conversation[]

  @@index([sellerId])
  @@index([categoryId])
  @@map("product")
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  acceptedPrice Float?
  status        ChatStatus @default(OPEN)

  productId String
  product   Product @relation(fields: [productId], references: [id])
  buyerId   String
  buyer     User    @relation("BuyerConversations", fields: [buyerId], references: [id])

  sellerId String
  seller   User   @relation("SellerConversations", fields: [sellerId], references: [id])

  messages Message[]

  @@index([productId])
  @@index([buyerId])
  @@index([sellerId])
  @@map("conversation")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])

  message      String? // Normal text message
  priceOffered Float? // Price if it's a proposal
  isProposal   Boolean  @default(false)
  accepted     Boolean? // When receiver accepts
  rejected     Boolean? // When receiver rejects

  @@map("message")
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  items CartItem[]

  @@index([userId])
  @@map("cart")
}

model CartItem {
  id      String   @id @default(cuid())
  addedAt DateTime @default(now())

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity  Int   @default(1)
  unitPrice Float

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_item")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  total                 Float
  status                OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(REQUIRES_PAYMENT)
  stripePaymentIntentId String?
  stripePaymentMethodId String?

  items OrderItem[]

  @@index([userId])
  @@index([stripePaymentIntentId])
  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity  Int
  unitPrice Float

  @@index([orderId])
  @@index([productId])
  @@map("order_item")
}